{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let HomeComponent = class HomeComponent {\n  constructor(taskService) {\n    this.taskService = taskService;\n    this.tasks = [];\n    //This is to Validate the login\n    this.Email = \"\";\n    this.Password = \"\";\n    this.loginError = false;\n  }\n  ngOnInit() {\n    // Use the service methods here\n    this.taskService.getTasks().subscribe(data => {\n      this.tasks = data;\n      console.log('Tasks retrieved:', this.tasks);\n    }, error => {\n      console.error('Error fetching tasks:', error);\n    });\n  }\n  //This function is used to close the form and redisplay the login button\n  CloseLogin() {\n    const Spinning = [{\n      transform: \"scale(1)\"\n    }, {\n      transform: \"scale(0)\"\n    }];\n    const SpinOutTiming = {\n      duration: 1000,\n      iterations: 1\n    };\n    const forDisplay = document.getElementById(\"LoginForm\");\n    const logButton = document.getElementById(\"OpenLogin\");\n    const closeButton = document.getElementById(\"CloseLogin\");\n    if (forDisplay != null && logButton != null && closeButton != null) {\n      forDisplay.animate(Spinning, SpinOutTiming);\n      setTimeout(function () {\n        forDisplay.style.visibility = \"hidden\";\n      }, 900);\n    }\n  }\n  ValidateLogin(event) {\n    console.log(this.Email);\n    console.log(this.Password);\n    if (this.Email == \"name@example.com\" && this.Password == \"password\") {\n      this.loginError = false;\n    } else {\n      this.loginError = true;\n    }\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})], HomeComponent);","map":{"version":3,"names":["Component","HomeComponent","constructor","taskService","tasks","Email","Password","loginError","ngOnInit","getTasks","subscribe","data","console","log","error","CloseLogin","Spinning","transform","SpinOutTiming","duration","iterations","forDisplay","document","getElementById","logButton","closeButton","animate","setTimeout","style","visibility","ValidateLogin","event","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ledon\\Desktop\\CSCI467-Group-Project\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, Directive, OnInit } from '@angular/core';\r\nimport { TaskService } from '../services/dbconnect.service';\r\nimport * as $ from 'jquery';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\n\r\n\r\nexport class HomeComponent implements OnInit {\r\n\r\n  tasks: any[] = [];\r\n\r\n  constructor(private taskService: TaskService) {}\r\n  ngOnInit(): void {\r\n    // Use the service methods here\r\n    this.taskService.getTasks().subscribe(\r\n      (data: any[]) => {\r\n        this.tasks = data;\r\n        console.log('Tasks retrieved:', this.tasks);\r\n      },\r\n      (error: any[]) => {\r\n        console.error('Error fetching tasks:', error);\r\n      }\r\n    );\r\n  }\r\n  //This function is used to close the form and redisplay the login button\r\n  CloseLogin(): void{\r\n    const Spinning = [\r\n      { transform: \"scale(1)\" },\r\n      { transform: \"scale(0)\" },\r\n    ];\r\n    \r\n    const SpinOutTiming = {\r\n      duration: 1000,\r\n      iterations: 1,\r\n    };\r\n    const forDisplay = document.getElementById(\"LoginForm\");\r\n    const logButton = document.getElementById(\"OpenLogin\");\r\n    const closeButton = document.getElementById(\"CloseLogin\");\r\n\r\n    if(forDisplay != null && logButton != null && closeButton != null){\r\n      forDisplay.animate(Spinning, SpinOutTiming);\r\n      setTimeout(function(){\r\n        forDisplay.style.visibility=\"hidden\";\r\n      }, 900);\r\n    }\r\n  }\r\n\r\n  //This is to Validate the login\r\n  Email : string=\"\";\r\n  Password : string=\"\";\r\n  loginError: boolean = false;\r\n  ValidateLogin(event : Event){\r\n    console.log(this.Email);\r\n    console.log(this.Password);\r\n    if(this.Email == \"name@example.com\" && this.Password == \"password\"){\r\n      this.loginError = false;\r\n    }else{\r\n      this.loginError = true;\r\n    }\r\n  }\r\n\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAA2B,eAAe;AAWrD,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAIxBC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAF/B,KAAAC,KAAK,GAAU,EAAE;IAsCjB;IACA,KAAAC,KAAK,GAAU,EAAE;IACjB,KAAAC,QAAQ,GAAU,EAAE;IACpB,KAAAC,UAAU,GAAY,KAAK;EAvCoB;EAC/CC,QAAQA,CAAA;IACN;IACA,IAAI,CAACL,WAAW,CAACM,QAAQ,EAAE,CAACC,SAAS,CAClCC,IAAW,IAAI;MACd,IAAI,CAACP,KAAK,GAAGO,IAAI;MACjBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAACT,KAAK,CAAC;IAC7C,CAAC,EACAU,KAAY,IAAI;MACfF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,CACF;EACH;EACA;EACAC,UAAUA,CAAA;IACR,MAAMC,QAAQ,GAAG,CACf;MAAEC,SAAS,EAAE;IAAU,CAAE,EACzB;MAAEA,SAAS,EAAE;IAAU,CAAE,CAC1B;IAED,MAAMC,aAAa,GAAG;MACpBC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;KACb;IACD,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;IACvD,MAAMC,SAAS,GAAGF,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;IACtD,MAAME,WAAW,GAAGH,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;IAEzD,IAAGF,UAAU,IAAI,IAAI,IAAIG,SAAS,IAAI,IAAI,IAAIC,WAAW,IAAI,IAAI,EAAC;MAChEJ,UAAU,CAACK,OAAO,CAACV,QAAQ,EAAEE,aAAa,CAAC;MAC3CS,UAAU,CAAC;QACTN,UAAU,CAACO,KAAK,CAACC,UAAU,GAAC,QAAQ;MACtC,CAAC,EAAE,GAAG,CAAC;;EAEX;EAMAC,aAAaA,CAACC,KAAa;IACzBnB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,KAAK,CAAC;IACvBO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,QAAQ,CAAC;IAC1B,IAAG,IAAI,CAACD,KAAK,IAAI,kBAAkB,IAAI,IAAI,CAACC,QAAQ,IAAI,UAAU,EAAC;MACjE,IAAI,CAACC,UAAU,GAAG,KAAK;KACxB,MAAI;MACH,IAAI,CAACA,UAAU,GAAG,IAAI;;EAE1B;CAED;AAtDYN,aAAa,GAAA+B,UAAA,EAPzBhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EAGWlC,aAAa,CAsDzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}