{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nexport let QuoteComponent = class QuoteComponent {\n  constructor(renderer, http, router, fb) {\n    this.renderer = renderer;\n    this.http = http;\n    this.router = router;\n    this.fb = fb;\n    this.selectOptions = [];\n    //Number of rows in the quote\n    this.count = 1;\n    //We only want 1 Secret Note per Quote\n    this.NoteCount = 0;\n  }\n  ngOnInit() {\n    this.http.get('https://phpapicsci467.azurewebsites.net/php_script/Customers.php').subscribe(response => {\n      this.selectOptions = response;\n    });\n    this.quoteForm = this.fb.group({\n      Id: [],\n      quote_data: this.fb.array([this.fb.group({\n        point: ''\n      })])\n    });\n    var CustomerSelect = localStorage.getItem('CurrentCustomer');\n    if (CustomerSelect !== null) {\n      this.SelectedVal = JSON.parse(CustomerSelect);\n      console.log(this.SelectedVal);\n    }\n    var AssocName = localStorage.getItem('AssocName');\n    if (AssocName !== null) {\n      this.EmpName = JSON.parse(AssocName);\n    }\n    var savedAssoc = localStorage.getItem('CurrentAssoc');\n    if (savedAssoc !== null) {\n      savedAssoc = JSON.parse(savedAssoc);\n      console.log(savedAssoc);\n    } else {\n      this.router.navigateByUrl('/');\n      setTimeout(function () {\n        alert(\"Error: User not found, please Login\");\n      }, 200);\n    }\n  }\n  get quoteData() {\n    return this.quoteForm.get('quota_data');\n  }\n  /* This function will Add another row to the current Quote */\n  AddRow() {\n    //HTML content for adding another row to the quote\n    var htmlContent = `<div class=\"col col-lg\"> \n                          <div class=\"p-3 border bg-dark\"><input style=\"width: 100%;\" [(ngModel)]=\"QuoteRow[${this.count}].Item\" [id]=\"Item${this.count}\" type=\"text\"></div> \n                          </div> \n                          <div class=\"col col-md-auto\"> \n                              <div class=\"p-3 border bg-dark\"><input [(ngModel)]=\"QuoteRow[${this.count}].Qty\" [id]=\"Qty${this.count}\" type=\"number\"></div>\n                          </div> \n                          <div class=\"col col-md-auto\"> \n                              <div class=\" p-3 border bg-dark\"><input [(ngModel)]=\"QuoteRow[${this.count}].Price\" [id]=\"Price${this.count}\" type=\"number\" step=\"0.01\"></div> \n                          </div>\n                       </div>`;\n    //Creating the Seperating Line\n    const newElement = this.renderer.createElement('hr');\n    newElement.style.borderWidth = '5px';\n    newElement.style.color = 'rgb(0,0,0)';\n    newElement.style.backgroundColor = 'black';\n    //Creating the new Quote Row\n    const newElement2 = this.renderer.createElement('div');\n    newElement2.className = 'row';\n    newElement2.innerHTML = htmlContent;\n    // Append the new element as the last child of the div\n    this.renderer.appendChild(this.container.nativeElement, newElement);\n    this.renderer.appendChild(this.container.nativeElement, newElement2);\n    this.count++;\n  }\n  RetriveData() {\n    console.log(this.SelectedVal);\n    localStorage.setItem('CurrentCustomer', this.SelectedVal);\n  }\n  AddNote() {\n    if (this.NoteCount == 0) {\n      var htmlContent = `<div class=\"col col-lg\"> \n                            <h4>Secret Note</h4>\n                            <div class=\"p-3 border bg-dark\"><input style=\"width:100%;\" id=\"SecretNote\" type=\"text\"></div>\n                          </div>`;\n      //Creating a 'Secret Note'\n      const SecretNote = this.renderer.createElement('div');\n      SecretNote.className = 'row';\n      SecretNote.innerHTML = htmlContent;\n      //Creating the Seperating Line\n      const newElement = this.renderer.createElement('hr');\n      newElement.style.borderWidth = '10px';\n      newElement.style.color = 'rgb(0,0,0)';\n      newElement.style.backgroundColor = 'black';\n      this.renderer.appendChild(this.SecretNote.nativeElement, newElement);\n      this.renderer.appendChild(this.SecretNote.nativeElement, SecretNote);\n      ++this.NoteCount;\n    } else {\n      alert(\"There is already a Secret Note, on this Quote\");\n    }\n  }\n  QuoteFinish() {\n    for (let i = 0; i < this.count; i++) {\n      const inputId = `Item${i}`;\n      const inputValue = this.container.nativeElement.querySelector(`#${inputId}`).value;\n      console.log(`Value of input with ID ${inputId}: ${inputValue}`);\n    }\n  }\n};\n__decorate([ViewChild('container', {\n  static: true\n})], QuoteComponent.prototype, \"container\", void 0);\n__decorate([ViewChild('SecretNote', {\n  static: true\n})], QuoteComponent.prototype, \"SecretNote\", void 0);\nQuoteComponent = __decorate([Component({\n  selector: 'app-quote',\n  templateUrl: './quote.component.html',\n  styleUrls: ['./quote.component.css']\n})\n/* *****************************************************************\n * This is the QuoteComponent, it is responsible for the interface *\n *  that allows a sales associate to make a quote                  *\n * *****************************************************************/], QuoteComponent);","map":{"version":3,"names":["Component","ViewChild","QuoteComponent","constructor","renderer","http","router","fb","selectOptions","count","NoteCount","ngOnInit","get","subscribe","response","quoteForm","group","Id","quote_data","array","point","CustomerSelect","localStorage","getItem","SelectedVal","JSON","parse","console","log","AssocName","EmpName","savedAssoc","navigateByUrl","setTimeout","alert","quoteData","AddRow","htmlContent","newElement","createElement","style","borderWidth","color","backgroundColor","newElement2","className","innerHTML","appendChild","container","nativeElement","RetriveData","setItem","AddNote","SecretNote","QuoteFinish","i","inputId","inputValue","querySelector","value","__decorate","static","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ledon\\Desktop\\CSCI467-Group-Project\\src\\app\\quote\\quote.component.ts"],"sourcesContent":["import { Component, ElementRef, Renderer2, ViewChild, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router, NavigationEnd,ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, FormArray, FormControl } from '@angular/forms';\r\nimport { Quote, QuoteData} from '../quote';\r\n\r\n@Component({\r\n  selector: 'app-quote',\r\n  templateUrl: './quote.component.html',\r\n  styleUrls: ['./quote.component.css'],\r\n\r\n})\r\n\r\n/* ***************************************************************** \r\n * This is the QuoteComponent, it is responsible for the interface *\r\n *  that allows a sales associate to make a quote                  *\r\n * *****************************************************************/\r\nexport class QuoteComponent implements OnInit{\r\n\r\n  responseFromPHP: any;\r\n  selectOptions: any[] = [];\r\n  SelectedVal: any;\r\n  EmpName: any;\r\n\r\n  constructor(private renderer: Renderer2, private http: HttpClient, private router: Router, private fb: FormBuilder) { }\r\n\r\n  @ViewChild('container', { static: true }) container!: ElementRef;\r\n  @ViewChild('SecretNote', { static: true }) SecretNote!: ElementRef;\r\n\r\n  quoteForm!: FormGroup;\r\n  \r\n  ngOnInit() {\r\n    this.http.get('https://phpapicsci467.azurewebsites.net/php_script/Customers.php').subscribe((response: any) => {\r\n      this.selectOptions = response;\r\n    });\r\n\r\n    this.quoteForm = this.fb.group({\r\n      Id: [],\r\n      quote_data: this.fb.array([this.fb.group({point:''})])\r\n    });\r\n\r\n    var CustomerSelect = localStorage.getItem('CurrentCustomer');\r\n    if(CustomerSelect !== null){\r\n      this.SelectedVal = JSON.parse(CustomerSelect);\r\n      console.log(this.SelectedVal);\r\n    }\r\n    var AssocName = localStorage.getItem('AssocName');\r\n    if(AssocName !== null){\r\n      this.EmpName = JSON.parse(AssocName);\r\n    }\r\n    var savedAssoc = localStorage.getItem('CurrentAssoc');\r\n    if(savedAssoc !== null){\r\n      savedAssoc = JSON.parse(savedAssoc);\r\n      console.log(savedAssoc);\r\n    }else{\r\n      this.router.navigateByUrl('/');\r\n      setTimeout(function(){\r\n        alert(\"Error: User not found, please Login\");\r\n      }, 200);\r\n    }\r\n  }\r\n\r\n  get quoteData(){\r\n    return this.quoteForm.get('quota_data') as FormArray;\r\n  }\r\n  \r\n\r\n  //Number of rows in the quote\r\n  count: number = 1;\r\n  /* This function will Add another row to the current Quote */\r\n  AddRow() : void{\r\n    //HTML content for adding another row to the quote\r\n    var htmlContent = `<div class=\"col col-lg\"> \r\n                          <div class=\"p-3 border bg-dark\"><input style=\"width: 100%;\" [(ngModel)]=\"QuoteRow[${this.count}].Item\" [id]=\"Item${this.count}\" type=\"text\"></div> \r\n                          </div> \r\n                          <div class=\"col col-md-auto\"> \r\n                              <div class=\"p-3 border bg-dark\"><input [(ngModel)]=\"QuoteRow[${this.count}].Qty\" [id]=\"Qty${this.count}\" type=\"number\"></div>\r\n                          </div> \r\n                          <div class=\"col col-md-auto\"> \r\n                              <div class=\" p-3 border bg-dark\"><input [(ngModel)]=\"QuoteRow[${this.count}].Price\" [id]=\"Price${this.count}\" type=\"number\" step=\"0.01\"></div> \r\n                          </div>\r\n                       </div>`;\r\n\r\n    //Creating the Seperating Line\r\n    const newElement = this.renderer.createElement('hr');\r\n    newElement.style.borderWidth = '5px';\r\n    newElement.style.color = 'rgb(0,0,0)';\r\n    newElement.style.backgroundColor = 'black';\r\n    //Creating the new Quote Row\r\n    const newElement2 = this.renderer.createElement('div');\r\n    newElement2.className = 'row';\r\n    newElement2.innerHTML = htmlContent;\r\n\r\n    // Append the new element as the last child of the div\r\n    this.renderer.appendChild(this.container.nativeElement, newElement);\r\n    \r\n    this.renderer.appendChild(this.container.nativeElement, newElement2);\r\n\r\n    this.count++;\r\n  }\r\n  \r\n  RetriveData() : void{\r\n    console.log(this.SelectedVal);\r\n    localStorage.setItem('CurrentCustomer',this.SelectedVal);\r\n  }\r\n\r\n  //We only want 1 Secret Note per Quote\r\n  NoteCount: number = 0;\r\n  AddNote() : void{\r\n\r\n    if(this.NoteCount == 0){\r\n      var htmlContent = `<div class=\"col col-lg\"> \r\n                            <h4>Secret Note</h4>\r\n                            <div class=\"p-3 border bg-dark\"><input style=\"width:100%;\" id=\"SecretNote\" type=\"text\"></div>\r\n                          </div>`;\r\n      //Creating a 'Secret Note'\r\n      const SecretNote = this.renderer.createElement('div');\r\n      SecretNote.className = 'row';\r\n      SecretNote.innerHTML = htmlContent;\r\n\r\n      //Creating the Seperating Line\r\n      const newElement = this.renderer.createElement('hr');\r\n      newElement.style.borderWidth = '10px';\r\n      newElement.style.color = 'rgb(0,0,0)';\r\n      newElement.style.backgroundColor = 'black';\r\n\r\n      this.renderer.appendChild(this.SecretNote.nativeElement, newElement);\r\n      this.renderer.appendChild(this.SecretNote.nativeElement, SecretNote);\r\n      ++this.NoteCount;\r\n    }else{\r\n      alert(\"There is already a Secret Note, on this Quote\");\r\n    }\r\n  }\r\n\r\n  QuoteFinish() : any{\r\n    for (let i = 0; i < this.count; i++) {\r\n      const inputId = `Item${i}`;\r\n      const inputValue = this.container.nativeElement.querySelector(`#${inputId}`).value;\r\n      console.log(`Value of input with ID ${inputId}: ${inputValue}`);\r\n    }\r\n  }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}