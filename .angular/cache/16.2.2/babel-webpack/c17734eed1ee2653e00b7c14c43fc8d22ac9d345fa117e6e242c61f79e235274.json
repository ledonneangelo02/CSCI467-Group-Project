{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let QuoteComponent = class QuoteComponent {\n  constructor(http, router, formBuilder, cd) {\n    this.http = http;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.cd = cd;\n    this.selectOptions = [];\n    this.showSecretNote = false;\n    this.total = 0.0;\n    this.quoteUrl = 'https://phpapicsci467.azurewebsites.net/php_script/FinalizeQuote.php';\n    this.quoteForm = this.formBuilder.group({\n      rows: this.formBuilder.array([this.createRow() // Creates our inital row, so the page isn't empty\n      ]),\n\n      SecretNote: ['']\n    });\n  }\n  ngOnInit() {\n    this.http.get('https://phpapicsci467.azurewebsites.net/php_script/Customers.php').subscribe(response => {\n      this.selectOptions = response;\n      console.log(response);\n      console.log(this.selectOptions);\n    });\n    //This will check the localStorage for the Associate ID and if there is a customer currently picked\n    this.Datacheck();\n  }\n  get rowControls() {\n    return this.quoteForm.get('rows').controls;\n  }\n  /* This function will add another row to the current Quote */\n  addRow() {\n    const newRow = this.formBuilder.group({\n      Item: '',\n      Qty: 0,\n      Price: 0.0\n    });\n    this.calculateRunningTotal();\n    this.quoteForm.get('rows').push(newRow);\n  }\n  createRow() {\n    return this.formBuilder.group({\n      Item: '',\n      Qty: 0,\n      Price: 0.0\n    });\n  }\n  /* **********************************************************\n   * This function will aquire the customer that was selected *\n   *   and store it for later use.                            *\n   * **********************************************************/\n  RetriveCustomer() {\n    this.CustName = this.selectOptions[this.SelectedVal].name;\n    localStorage.setItem('CurrentCustomer', this.SelectedVal);\n    localStorage.setItem('CurrentCustomerName', this.CustName);\n    console.log(this.SelectedVal);\n    console.log(this.CustName);\n  }\n  AddNote() {\n    this.showSecretNote = !this.showSecretNote;\n  }\n  /* **********************************************\n   * This function will calculate the Quote Total *\n   * **********************************************/\n  calculateRunningTotal() {\n    const rows = this.quoteForm.get('rows');\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows.at(i);\n      if (row) {\n        const qtyControl = row.get('Qty');\n        const priceControl = row.get('Price');\n        if (qtyControl && priceControl) {\n          const qty = qtyControl.value;\n          const price = priceControl.value;\n          this.total += qty * price;\n          this.cd.markForCheck();\n        }\n      }\n    }\n  }\n  QuoteFinish() {\n    if (this.CustName == null && this.SelectedVal == null) {\n      alert(\"No customer selected, please select a customer and try again!\");\n    } else {\n      this.calculateRunningTotal();\n      const formData = this.quoteForm.value;\n      const FinalformData = {\n        formData,\n        AssocID: this.savedAssoc,\n        CustID: this.SelectedVal,\n        CustomerName: this.CustName,\n        QuoteTotal: this.total\n      };\n      this.http.post(this.quoteUrl, FinalformData).subscribe({\n        next: data => {\n          // Handle the data\n          alert(\"Quote Submitted!\");\n          localStorage.removeItem('CurrentCustomer');\n          localStorage.removeItem('CurrentCustomerName');\n          location.reload();\n        },\n        error: error => {\n          console.error('Error saving data', error);\n        }\n      });\n    }\n  }\n  /* *********************************************************\n   * This function will check to make sure a sales associate *\n   *   is properly logged in, and it will check if we have a *\n   *   current customer selected.                            *\n   * *********************************************************/\n  Datacheck() {\n    //Stored Customer ID\n    var CustomerSelect = localStorage.getItem('CurrentCustomer');\n    if (CustomerSelect !== null) {\n      this.SelectedVal = JSON.parse(CustomerSelect);\n      console.log(this.SelectedVal);\n    }\n    //Stored Customer Name\n    var CustomerSelectName = localStorage.getItem('CurrentCustomerName');\n    if (CustomerSelectName !== null) {\n      this.CustName = CustomerSelectName;\n      console.log(this.CustName);\n    }\n    //Stored Associate Name\n    var AssocName = localStorage.getItem('AssocName');\n    if (AssocName !== null) {\n      this.EmpName = JSON.parse(AssocName);\n    }\n    //Stored Admin Flag\n    var AdminFlag = localStorage.getItem('AdminFlag');\n    if (AdminFlag !== null) {\n      this.AdminFlag = JSON.parse(AdminFlag);\n      console.log(AdminFlag);\n    }\n    //Stored Associate ID\n    var savedAssoc = localStorage.getItem('CurrentAssoc');\n    if (savedAssoc !== null) {\n      this.savedAssoc = JSON.parse(savedAssoc);\n      console.log(savedAssoc);\n    } else {\n      this.router.navigateByUrl('/');\n      setTimeout(function () {\n        alert(\"Error: User not found, please Login\");\n      }, 200);\n    }\n  }\n};\nQuoteComponent = __decorate([Component({\n  selector: 'app-quote',\n  templateUrl: './quote.component.html',\n  styleUrls: ['./quote.component.css']\n})\n/* *****************************************************************\n * This is the QuoteComponent, it is responsible for the interface *\n *  that allows a sales associate to make a quote                  *\n * *****************************************************************/], QuoteComponent);","map":{"version":3,"names":["Component","QuoteComponent","constructor","http","router","formBuilder","cd","selectOptions","showSecretNote","total","quoteUrl","quoteForm","group","rows","array","createRow","SecretNote","ngOnInit","get","subscribe","response","console","log","Datacheck","rowControls","controls","addRow","newRow","Item","Qty","Price","calculateRunningTotal","push","RetriveCustomer","CustName","SelectedVal","name","localStorage","setItem","AddNote","i","length","row","at","qtyControl","priceControl","qty","value","price","markForCheck","QuoteFinish","alert","formData","FinalformData","AssocID","savedAssoc","CustID","CustomerName","QuoteTotal","post","next","data","removeItem","location","reload","error","CustomerSelect","getItem","JSON","parse","CustomerSelectName","AssocName","EmpName","AdminFlag","navigateByUrl","setTimeout","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ledon\\Desktop\\CSCI467-Group-Project\\src\\app\\quote\\quote.component.ts"],"sourcesContent":["import { Component, OnInit, ChangeDetectorRef} from '@angular/core';\r\nimport { HttpClient} from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, FormArray} from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-quote',\r\n  templateUrl: './quote.component.html',\r\n  styleUrls: ['./quote.component.css'],\r\n\r\n})\r\n\r\n/* ***************************************************************** \r\n * This is the QuoteComponent, it is responsible for the interface *\r\n *  that allows a sales associate to make a quote                  *\r\n * *****************************************************************/\r\nexport class QuoteComponent implements OnInit{\r\n\r\n  responseFromPHP: any;\r\n  selectOptions: any[] = [];\r\n\r\n  SelectedVal: any;\r\n  CustName: any;\r\n  EmpName: any;\r\n  savedAssoc: any;\r\n  AdminFlag: any;\r\n\r\n  quoteForm: FormGroup;\r\n  showSecretNote: boolean = false;\r\n  total: number = 0.0;\r\n\r\n  constructor(private http: HttpClient, private router: Router, private formBuilder: FormBuilder, private cd: ChangeDetectorRef) {\r\n    this.quoteForm = this.formBuilder.group({\r\n      rows: this.formBuilder.array([\r\n        this.createRow() // Creates our inital row, so the page isn't empty\r\n      ]),\r\n      SecretNote: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.http.get('https://phpapicsci467.azurewebsites.net/php_script/Customers.php').subscribe((response: any) => {\r\n      this.selectOptions = response;\r\n      console.log(response);\r\n      console.log(this.selectOptions);\r\n    });\r\n\r\n    //This will check the localStorage for the Associate ID and if there is a customer currently picked\r\n    this.Datacheck();\r\n  }\r\n\r\n  get rowControls() {\r\n    return (this.quoteForm.get('rows') as FormArray).controls;\r\n  }\r\n\r\n  /* This function will add another row to the current Quote */\r\n  addRow() {\r\n    const newRow = this.formBuilder.group({\r\n      Item: '',\r\n      Qty: 0,\r\n      Price: 0.0,\r\n    });\r\n    this.calculateRunningTotal();\r\n    (this.quoteForm.get('rows') as FormArray).push(newRow);\r\n  }\r\n\r\n  private createRow() {\r\n    return this.formBuilder.group({\r\n      Item: '',\r\n      Qty: 0,\r\n      Price: 0.0,\r\n    });\r\n  }\r\n\r\n\r\n  /* **********************************************************\r\n   * This function will aquire the customer that was selected *\r\n   *   and store it for later use.                            *\r\n   * **********************************************************/\r\n  RetriveCustomer() : void{\r\n    this.CustName = this.selectOptions[this.SelectedVal].name;\r\n    localStorage.setItem('CurrentCustomer',this.SelectedVal);\r\n    localStorage.setItem('CurrentCustomerName',this.CustName);\r\n    console.log(this.SelectedVal);\r\n    console.log(this.CustName);\r\n  }\r\n\r\n\r\n  AddNote() : void{\r\n    this.showSecretNote = !this.showSecretNote;\r\n  }\r\n\r\n  /* **********************************************\r\n   * This function will calculate the Quote Total *\r\n   * **********************************************/\r\n  calculateRunningTotal() {\r\n    const rows = this.quoteForm.get('rows') as FormArray;\r\n  \r\n    for (let i = 0; i < rows.length; i++) {\r\n      const row = rows.at(i);\r\n      if (row) {\r\n        const qtyControl = row.get('Qty');\r\n        const priceControl = row.get('Price');\r\n  \r\n        if (qtyControl && priceControl) {\r\n          const qty = qtyControl.value;\r\n          const price = priceControl.value;\r\n          this.total += qty * price;\r\n          this.cd.markForCheck();\r\n        }\r\n      }\r\n    }\r\n  \r\n  }\r\n\r\n\r\n  private quoteUrl = 'https://phpapicsci467.azurewebsites.net/php_script/FinalizeQuote.php';\r\n  QuoteFinish() : any{\r\n    if(this.CustName == null && this.SelectedVal == null){\r\n      alert(\"No customer selected, please select a customer and try again!\");\r\n    }else{\r\n      this.calculateRunningTotal();\r\n      const formData = this.quoteForm.value;\r\n      const FinalformData = {\r\n        formData,\r\n        AssocID: this.savedAssoc,\r\n        CustID: this.SelectedVal,\r\n        CustomerName: this.CustName,\r\n        QuoteTotal: this.total\r\n      };\r\n  \r\n      this.http.post(this.quoteUrl, FinalformData).subscribe({        \r\n        next: (data: any) => {\r\n        // Handle the data\r\n        alert(\"Quote Submitted!\");\r\n        localStorage.removeItem('CurrentCustomer');\r\n        localStorage.removeItem('CurrentCustomerName');\r\n        location.reload();\r\n        },\r\n        error: (error) => {\r\n          console.error('Error saving data', error);\r\n        }\r\n      });\r\n    }\r\n}\r\n\r\n  /* *********************************************************\r\n   * This function will check to make sure a sales associate *\r\n   *   is properly logged in, and it will check if we have a *\r\n   *   current customer selected.                            *\r\n   * *********************************************************/\r\n  Datacheck(): void{\r\n    //Stored Customer ID\r\n    var CustomerSelect = localStorage.getItem('CurrentCustomer');\r\n    if(CustomerSelect !== null){\r\n      this.SelectedVal = JSON.parse(CustomerSelect);\r\n      console.log(this.SelectedVal);\r\n    }\r\n    //Stored Customer Name\r\n    var CustomerSelectName = localStorage.getItem('CurrentCustomerName');\r\n    if(CustomerSelectName !== null){\r\n      this.CustName = CustomerSelectName;\r\n      console.log(this.CustName);\r\n    }\r\n    //Stored Associate Name\r\n    var AssocName = localStorage.getItem('AssocName');\r\n    if(AssocName !== null){\r\n      this.EmpName = JSON.parse(AssocName);\r\n    }\r\n    \r\n    //Stored Admin Flag\r\n    var AdminFlag = localStorage.getItem('AdminFlag');\r\n    if(AdminFlag !== null){\r\n      this.AdminFlag = JSON.parse(AdminFlag);\r\n      console.log(AdminFlag);\r\n    }\r\n\r\n    //Stored Associate ID\r\n    var savedAssoc = localStorage.getItem('CurrentAssoc');\r\n    if(savedAssoc !== null){\r\n      this.savedAssoc = JSON.parse(savedAssoc);\r\n      console.log(savedAssoc);\r\n    }else{\r\n      this.router.navigateByUrl('/');\r\n      setTimeout(function(){\r\n        alert(\"Error: User not found, please Login\");\r\n      }, 200);\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAkC,eAAe;AAiB5D,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAezBC,YAAoBC,IAAgB,EAAUC,MAAc,EAAUC,WAAwB,EAAUC,EAAqB;IAAzG,KAAAH,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,WAAW,GAAXA,WAAW;IAAuB,KAAAC,EAAE,GAAFA,EAAE;IAZ1G,KAAAC,aAAa,GAAU,EAAE;IASzB,KAAAC,cAAc,GAAY,KAAK;IAC/B,KAAAC,KAAK,GAAW,GAAG;IAuFX,KAAAC,QAAQ,GAAG,sEAAsE;IApFvF,IAAI,CAACC,SAAS,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;MACtCC,IAAI,EAAE,IAAI,CAACR,WAAW,CAACS,KAAK,CAAC,CAC3B,IAAI,CAACC,SAAS,EAAE,CAAC;MAAA,CAClB,CAAC;;MACFC,UAAU,EAAE,CAAC,EAAE;KAChB,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACd,IAAI,CAACe,GAAG,CAAC,kEAAkE,CAAC,CAACC,SAAS,CAAEC,QAAa,IAAI;MAC5G,IAAI,CAACb,aAAa,GAAGa,QAAQ;MAC7BC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACf,aAAa,CAAC;IACjC,CAAC,CAAC;IAEF;IACA,IAAI,CAACgB,SAAS,EAAE;EAClB;EAEA,IAAIC,WAAWA,CAAA;IACb,OAAQ,IAAI,CAACb,SAAS,CAACO,GAAG,CAAC,MAAM,CAAe,CAACO,QAAQ;EAC3D;EAEA;EACAC,MAAMA,CAAA;IACJ,MAAMC,MAAM,GAAG,IAAI,CAACtB,WAAW,CAACO,KAAK,CAAC;MACpCgB,IAAI,EAAE,EAAE;MACRC,GAAG,EAAE,CAAC;MACNC,KAAK,EAAE;KACR,CAAC;IACF,IAAI,CAACC,qBAAqB,EAAE;IAC3B,IAAI,CAACpB,SAAS,CAACO,GAAG,CAAC,MAAM,CAAe,CAACc,IAAI,CAACL,MAAM,CAAC;EACxD;EAEQZ,SAASA,CAAA;IACf,OAAO,IAAI,CAACV,WAAW,CAACO,KAAK,CAAC;MAC5BgB,IAAI,EAAE,EAAE;MACRC,GAAG,EAAE,CAAC;MACNC,KAAK,EAAE;KACR,CAAC;EACJ;EAGA;;;;EAIAG,eAAeA,CAAA;IACb,IAAI,CAACC,QAAQ,GAAG,IAAI,CAAC3B,aAAa,CAAC,IAAI,CAAC4B,WAAW,CAAC,CAACC,IAAI;IACzDC,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAC,IAAI,CAACH,WAAW,CAAC;IACxDE,YAAY,CAACC,OAAO,CAAC,qBAAqB,EAAC,IAAI,CAACJ,QAAQ,CAAC;IACzDb,OAAO,CAACC,GAAG,CAAC,IAAI,CAACa,WAAW,CAAC;IAC7Bd,OAAO,CAACC,GAAG,CAAC,IAAI,CAACY,QAAQ,CAAC;EAC5B;EAGAK,OAAOA,CAAA;IACL,IAAI,CAAC/B,cAAc,GAAG,CAAC,IAAI,CAACA,cAAc;EAC5C;EAEA;;;EAGAuB,qBAAqBA,CAAA;IACnB,MAAMlB,IAAI,GAAG,IAAI,CAACF,SAAS,CAACO,GAAG,CAAC,MAAM,CAAc;IAEpD,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,IAAI,CAAC4B,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,MAAME,GAAG,GAAG7B,IAAI,CAAC8B,EAAE,CAACH,CAAC,CAAC;MACtB,IAAIE,GAAG,EAAE;QACP,MAAME,UAAU,GAAGF,GAAG,CAACxB,GAAG,CAAC,KAAK,CAAC;QACjC,MAAM2B,YAAY,GAAGH,GAAG,CAACxB,GAAG,CAAC,OAAO,CAAC;QAErC,IAAI0B,UAAU,IAAIC,YAAY,EAAE;UAC9B,MAAMC,GAAG,GAAGF,UAAU,CAACG,KAAK;UAC5B,MAAMC,KAAK,GAAGH,YAAY,CAACE,KAAK;UAChC,IAAI,CAACtC,KAAK,IAAIqC,GAAG,GAAGE,KAAK;UACzB,IAAI,CAAC1C,EAAE,CAAC2C,YAAY,EAAE;;;;EAK9B;EAIAC,WAAWA,CAAA;IACT,IAAG,IAAI,CAAChB,QAAQ,IAAI,IAAI,IAAI,IAAI,CAACC,WAAW,IAAI,IAAI,EAAC;MACnDgB,KAAK,CAAC,+DAA+D,CAAC;KACvE,MAAI;MACH,IAAI,CAACpB,qBAAqB,EAAE;MAC5B,MAAMqB,QAAQ,GAAG,IAAI,CAACzC,SAAS,CAACoC,KAAK;MACrC,MAAMM,aAAa,GAAG;QACpBD,QAAQ;QACRE,OAAO,EAAE,IAAI,CAACC,UAAU;QACxBC,MAAM,EAAE,IAAI,CAACrB,WAAW;QACxBsB,YAAY,EAAE,IAAI,CAACvB,QAAQ;QAC3BwB,UAAU,EAAE,IAAI,CAACjD;OAClB;MAED,IAAI,CAACN,IAAI,CAACwD,IAAI,CAAC,IAAI,CAACjD,QAAQ,EAAE2C,aAAa,CAAC,CAAClC,SAAS,CAAC;QACrDyC,IAAI,EAAGC,IAAS,IAAI;UACpB;UACAV,KAAK,CAAC,kBAAkB,CAAC;UACzBd,YAAY,CAACyB,UAAU,CAAC,iBAAiB,CAAC;UAC1CzB,YAAY,CAACyB,UAAU,CAAC,qBAAqB,CAAC;UAC9CC,QAAQ,CAACC,MAAM,EAAE;QACjB,CAAC;QACDC,KAAK,EAAGA,KAAK,IAAI;UACf5C,OAAO,CAAC4C,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;QAC3C;OACD,CAAC;;EAER;EAEE;;;;;EAKA1C,SAASA,CAAA;IACP;IACA,IAAI2C,cAAc,GAAG7B,YAAY,CAAC8B,OAAO,CAAC,iBAAiB,CAAC;IAC5D,IAAGD,cAAc,KAAK,IAAI,EAAC;MACzB,IAAI,CAAC/B,WAAW,GAAGiC,IAAI,CAACC,KAAK,CAACH,cAAc,CAAC;MAC7C7C,OAAO,CAACC,GAAG,CAAC,IAAI,CAACa,WAAW,CAAC;;IAE/B;IACA,IAAImC,kBAAkB,GAAGjC,YAAY,CAAC8B,OAAO,CAAC,qBAAqB,CAAC;IACpE,IAAGG,kBAAkB,KAAK,IAAI,EAAC;MAC7B,IAAI,CAACpC,QAAQ,GAAGoC,kBAAkB;MAClCjD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACY,QAAQ,CAAC;;IAE5B;IACA,IAAIqC,SAAS,GAAGlC,YAAY,CAAC8B,OAAO,CAAC,WAAW,CAAC;IACjD,IAAGI,SAAS,KAAK,IAAI,EAAC;MACpB,IAAI,CAACC,OAAO,GAAGJ,IAAI,CAACC,KAAK,CAACE,SAAS,CAAC;;IAGtC;IACA,IAAIE,SAAS,GAAGpC,YAAY,CAAC8B,OAAO,CAAC,WAAW,CAAC;IACjD,IAAGM,SAAS,KAAK,IAAI,EAAC;MACpB,IAAI,CAACA,SAAS,GAAGL,IAAI,CAACC,KAAK,CAACI,SAAS,CAAC;MACtCpD,OAAO,CAACC,GAAG,CAACmD,SAAS,CAAC;;IAGxB;IACA,IAAIlB,UAAU,GAAGlB,YAAY,CAAC8B,OAAO,CAAC,cAAc,CAAC;IACrD,IAAGZ,UAAU,KAAK,IAAI,EAAC;MACrB,IAAI,CAACA,UAAU,GAAGa,IAAI,CAACC,KAAK,CAACd,UAAU,CAAC;MACxClC,OAAO,CAACC,GAAG,CAACiC,UAAU,CAAC;KACxB,MAAI;MACH,IAAI,CAACnD,MAAM,CAACsE,aAAa,CAAC,GAAG,CAAC;MAC9BC,UAAU,CAAC;QACTxB,KAAK,CAAC,qCAAqC,CAAC;MAC9C,CAAC,EAAE,GAAG,CAAC;;EAEX;CACD;AA7KYlD,cAAc,GAAA2E,UAAA,EAX1B5E,SAAS,CAAC;EACT6E,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CAEpC;AAED;;;qEAAA,C,EAIa9E,cAAc,CA6K1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}