{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let QuoteComponent = class QuoteComponent {\n  constructor(http, router, formBuilder) {\n    this.http = http;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.selectOptions = [];\n    this.SelectedOption = {\n      id: '',\n      name: ''\n    };\n    this.showSecretNote = false;\n    this.quoteUrl = 'https://phpapicsci467.azurewebsites.net/php_script/FinalizeQuote.php';\n    this.quoteForm = this.formBuilder.group({\n      rows: this.formBuilder.array([this.createRow()]),\n      SecretNote: [''],\n      AssocID: ['']\n    });\n  }\n  ngOnInit() {\n    this.http.get('https://phpapicsci467.azurewebsites.net/php_script/Customers.php').subscribe(response => {\n      this.selectOptions = response;\n    });\n    //This will check the localStorage for the Associate ID and if there is a customer currently picked\n    this.Datacheck();\n  }\n  get rowControls() {\n    return this.quoteForm.get('rows').controls;\n  }\n  /* This function will add another row to the current Quote */\n  addRow() {\n    const newRow = this.formBuilder.group({\n      Item: '',\n      Qty: 0,\n      Price: 0.0\n    });\n    this.quoteForm.get('rows').push(newRow);\n  }\n  createRow() {\n    return this.formBuilder.group({\n      Item: '',\n      Qty: 0,\n      Price: 0.0\n    });\n  }\n  /* **********************************************************\n   * This function will aquire the customer that was selected *\n   *   and store it for later use.                            *\n   * **********************************************************/\n  RetriveCustomer() {\n    console.log(this.SelectedOption.id);\n    console.log(this.SelectedOption.name);\n    localStorage.setItem('CurrentCustomer', this.SelectedOption.id);\n  }\n  AddNote() {\n    this.showSecretNote = !this.showSecretNote;\n  }\n  QuoteFinish() {\n    const formData = this.quoteForm.value;\n    this.http.post(this.quoteUrl, formData).subscribe({\n      next: data => {\n        // Handle the data\n        console.log('Data saved successfully');\n      },\n      error: error => {\n        console.error('Error saving data', error);\n      }\n    });\n  }\n  /* *********************************************************\n   * This function will check to make sure a sales associate *\n   *   is properly logged in, and it will check if we have a *\n   *   current customer selected.                            *\n   * *********************************************************/\n  Datacheck() {\n    var CustomerSelect = localStorage.getItem('CurrentCustomer');\n    if (CustomerSelect !== null) {\n      this.SelectedVal = JSON.parse(CustomerSelect);\n      console.log(this.SelectedVal);\n    }\n    var AssocName = localStorage.getItem('AssocName');\n    if (AssocName !== null) {\n      this.EmpName = JSON.parse(AssocName);\n    }\n    var savedAssoc = localStorage.getItem('CurrentAssoc');\n    if (savedAssoc !== null) {\n      savedAssoc = JSON.parse(savedAssoc);\n      console.log(savedAssoc);\n    } else {\n      this.router.navigateByUrl('/');\n      setTimeout(function () {\n        alert(\"Error: User not found, please Login\");\n      }, 200);\n    }\n  }\n};\nQuoteComponent = __decorate([Component({\n  selector: 'app-quote',\n  templateUrl: './quote.component.html',\n  styleUrls: ['./quote.component.css']\n})\n/* *****************************************************************\n * This is the QuoteComponent, it is responsible for the interface *\n *  that allows a sales associate to make a quote                  *\n * *****************************************************************/], QuoteComponent);","map":{"version":3,"names":["Component","QuoteComponent","constructor","http","router","formBuilder","selectOptions","SelectedOption","id","name","showSecretNote","quoteUrl","quoteForm","group","rows","array","createRow","SecretNote","AssocID","ngOnInit","get","subscribe","response","Datacheck","rowControls","controls","addRow","newRow","Item","Qty","Price","push","RetriveCustomer","console","log","localStorage","setItem","AddNote","QuoteFinish","formData","value","post","next","data","error","CustomerSelect","getItem","SelectedVal","JSON","parse","AssocName","EmpName","savedAssoc","navigateByUrl","setTimeout","alert","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ledon\\Desktop\\CSCI467-Group-Project\\src\\app\\quote\\quote.component.ts"],"sourcesContent":["import { Component, ElementRef, Renderer2, ViewChild, OnInit } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Router, NavigationEnd,ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, FormArray, FormControl } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-quote',\r\n  templateUrl: './quote.component.html',\r\n  styleUrls: ['./quote.component.css'],\r\n\r\n})\r\n\r\n/* ***************************************************************** \r\n * This is the QuoteComponent, it is responsible for the interface *\r\n *  that allows a sales associate to make a quote                  *\r\n * *****************************************************************/\r\nexport class QuoteComponent implements OnInit{\r\n\r\n  responseFromPHP: any;\r\n  selectOptions: any[] = [];\r\n  SelectedOption: { id: string, name: string } = { id: '', name: '' };\r\n  EmpName: any;\r\n  quoteForm: FormGroup;\r\n  showSecretNote: boolean = false;\r\n\r\n  constructor(private http: HttpClient, private router: Router, private formBuilder: FormBuilder) {\r\n    this.quoteForm = this.formBuilder.group({\r\n      rows: this.formBuilder.array([\r\n        this.createRow()\r\n      ]),\r\n      SecretNote: [''],\r\n      AssocID: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    this.http.get('https://phpapicsci467.azurewebsites.net/php_script/Customers.php').subscribe((response: any) => {\r\n      this.selectOptions = response;\r\n    });\r\n\r\n    //This will check the localStorage for the Associate ID and if there is a customer currently picked\r\n    this.Datacheck();\r\n  }\r\n\r\n  get rowControls() {\r\n    return (this.quoteForm.get('rows') as FormArray).controls;\r\n  }\r\n\r\n  /* This function will add another row to the current Quote */\r\n  addRow() {\r\n    const newRow = this.formBuilder.group({\r\n      Item: '',\r\n      Qty: 0,\r\n      Price: 0.0,\r\n    });\r\n\r\n    (this.quoteForm.get('rows') as FormArray).push(newRow);\r\n  }\r\n\r\n  private createRow() {\r\n    return this.formBuilder.group({\r\n      Item: '',\r\n      Qty: 0,\r\n      Price: 0.0,\r\n    });\r\n  }\r\n\r\n\r\n  /* **********************************************************\r\n   * This function will aquire the customer that was selected *\r\n   *   and store it for later use.                            *\r\n   * **********************************************************/\r\n  RetriveCustomer() : void{\r\n    console.log(this.SelectedOption.id);\r\n    console.log(this.SelectedOption.name);\r\n    localStorage.setItem('CurrentCustomer',this.SelectedOption.id);\r\n  }\r\n\r\n\r\n  AddNote() : void{\r\n    this.showSecretNote = !this.showSecretNote;\r\n  }\r\n\r\n\r\n  private quoteUrl = 'https://phpapicsci467.azurewebsites.net/php_script/FinalizeQuote.php';\r\n  QuoteFinish() : any{\r\n    const formData = this.quoteForm.value;\r\n\r\n    this.http.post(this.quoteUrl, formData).subscribe({        \r\n      next: (data: any) => {\r\n      // Handle the data\r\n      console.log('Data saved successfully');\r\n      },\r\n      error: (error) => {\r\n        console.error('Error saving data', error);\r\n      }\r\n    });\r\n  \r\n}\r\n\r\n  /* *********************************************************\r\n   * This function will check to make sure a sales associate *\r\n   *   is properly logged in, and it will check if we have a *\r\n   *   current customer selected.                            *\r\n   * *********************************************************/\r\n  Datacheck(): void{\r\n    var CustomerSelect = localStorage.getItem('CurrentCustomer');\r\n    if(CustomerSelect !== null){\r\n      this.SelectedVal = JSON.parse(CustomerSelect);\r\n      console.log(this.SelectedVal);\r\n    }\r\n    var AssocName = localStorage.getItem('AssocName');\r\n    if(AssocName !== null){\r\n      this.EmpName = JSON.parse(AssocName);\r\n    }\r\n    var savedAssoc = localStorage.getItem('CurrentAssoc');\r\n    if(savedAssoc !== null){\r\n      savedAssoc = JSON.parse(savedAssoc);\r\n      console.log(savedAssoc);\r\n    }else{\r\n      this.router.navigateByUrl('/');\r\n      setTimeout(function(){\r\n        alert(\"Error: User not found, please Login\");\r\n      }, 200);\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAkD,eAAe;AAiB5E,WAAMC,cAAc,GAApB,MAAMA,cAAc;EASzBC,YAAoBC,IAAgB,EAAUC,MAAc,EAAUC,WAAwB;IAA1E,KAAAF,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,WAAW,GAAXA,WAAW;IANjF,KAAAC,aAAa,GAAU,EAAE;IACzB,KAAAC,cAAc,GAAiC;MAAEC,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAE,CAAE;IAGnE,KAAAC,cAAc,GAAY,KAAK;IA8DvB,KAAAC,QAAQ,GAAG,sEAAsE;IA3DvF,IAAI,CAACC,SAAS,GAAG,IAAI,CAACP,WAAW,CAACQ,KAAK,CAAC;MACtCC,IAAI,EAAE,IAAI,CAACT,WAAW,CAACU,KAAK,CAAC,CAC3B,IAAI,CAACC,SAAS,EAAE,CACjB,CAAC;MACFC,UAAU,EAAE,CAAC,EAAE,CAAC;MAChBC,OAAO,EAAE,CAAC,EAAE;KACb,CAAC;EACJ;EAEAC,QAAQA,CAAA;IAEN,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAC,kEAAkE,CAAC,CAACC,SAAS,CAAEC,QAAa,IAAI;MAC5G,IAAI,CAAChB,aAAa,GAAGgB,QAAQ;IAC/B,CAAC,CAAC;IAEF;IACA,IAAI,CAACC,SAAS,EAAE;EAClB;EAEA,IAAIC,WAAWA,CAAA;IACb,OAAQ,IAAI,CAACZ,SAAS,CAACQ,GAAG,CAAC,MAAM,CAAe,CAACK,QAAQ;EAC3D;EAEA;EACAC,MAAMA,CAAA;IACJ,MAAMC,MAAM,GAAG,IAAI,CAACtB,WAAW,CAACQ,KAAK,CAAC;MACpCe,IAAI,EAAE,EAAE;MACRC,GAAG,EAAE,CAAC;MACNC,KAAK,EAAE;KACR,CAAC;IAED,IAAI,CAAClB,SAAS,CAACQ,GAAG,CAAC,MAAM,CAAe,CAACW,IAAI,CAACJ,MAAM,CAAC;EACxD;EAEQX,SAASA,CAAA;IACf,OAAO,IAAI,CAACX,WAAW,CAACQ,KAAK,CAAC;MAC5Be,IAAI,EAAE,EAAE;MACRC,GAAG,EAAE,CAAC;MACNC,KAAK,EAAE;KACR,CAAC;EACJ;EAGA;;;;EAIAE,eAAeA,CAAA;IACbC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC3B,cAAc,CAACC,EAAE,CAAC;IACnCyB,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC3B,cAAc,CAACE,IAAI,CAAC;IACrC0B,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAC,IAAI,CAAC7B,cAAc,CAACC,EAAE,CAAC;EAChE;EAGA6B,OAAOA,CAAA;IACL,IAAI,CAAC3B,cAAc,GAAG,CAAC,IAAI,CAACA,cAAc;EAC5C;EAIA4B,WAAWA,CAAA;IACT,MAAMC,QAAQ,GAAG,IAAI,CAAC3B,SAAS,CAAC4B,KAAK;IAErC,IAAI,CAACrC,IAAI,CAACsC,IAAI,CAAC,IAAI,CAAC9B,QAAQ,EAAE4B,QAAQ,CAAC,CAAClB,SAAS,CAAC;MAChDqB,IAAI,EAAGC,IAAS,IAAI;QACpB;QACAV,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtC,CAAC;MACDU,KAAK,EAAGA,KAAK,IAAI;QACfX,OAAO,CAACW,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MAC3C;KACD,CAAC;EAEN;EAEE;;;;;EAKArB,SAASA,CAAA;IACP,IAAIsB,cAAc,GAAGV,YAAY,CAACW,OAAO,CAAC,iBAAiB,CAAC;IAC5D,IAAGD,cAAc,KAAK,IAAI,EAAC;MACzB,IAAI,CAACE,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC;MAC7CZ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACa,WAAW,CAAC;;IAE/B,IAAIG,SAAS,GAAGf,YAAY,CAACW,OAAO,CAAC,WAAW,CAAC;IACjD,IAAGI,SAAS,KAAK,IAAI,EAAC;MACpB,IAAI,CAACC,OAAO,GAAGH,IAAI,CAACC,KAAK,CAACC,SAAS,CAAC;;IAEtC,IAAIE,UAAU,GAAGjB,YAAY,CAACW,OAAO,CAAC,cAAc,CAAC;IACrD,IAAGM,UAAU,KAAK,IAAI,EAAC;MACrBA,UAAU,GAAGJ,IAAI,CAACC,KAAK,CAACG,UAAU,CAAC;MACnCnB,OAAO,CAACC,GAAG,CAACkB,UAAU,CAAC;KACxB,MAAI;MACH,IAAI,CAAChD,MAAM,CAACiD,aAAa,CAAC,GAAG,CAAC;MAC9BC,UAAU,CAAC;QACTC,KAAK,CAAC,qCAAqC,CAAC;MAC9C,CAAC,EAAE,GAAG,CAAC;;EAEX;CACD;AA/GYtD,cAAc,GAAAuD,UAAA,EAX1BxD,SAAS,CAAC;EACTyD,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CAEpC;AAED;;;qEAAA,C,EAIa1D,cAAc,CA+G1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}