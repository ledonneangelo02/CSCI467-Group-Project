{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\nexport let QuoteeditComponent = class QuoteeditComponent {\n  /***********************************************************\n  * This is the constructor of the form.                     *\n  ***********************************************************/\n  constructor(http, router, formBuilder, cd) {\n    this.http = http;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.cd = cd;\n    this.selectedQuoteLines = [];\n    //Quote Details.\n    this.selectedID = 0;\n    this.showSecretNote = false;\n    this.NoteCounter = 0;\n    this.ChangeCounter = 0;\n    this.maxLineID = 0;\n    //Discount and Total Amounts.\n    this.total = 0.0;\n    this.DiscountType = 'P';\n    this.DiscountDollar = 0.00;\n    this.DiscountPercent = 0.00;\n    this.TempTotal = 0;\n    this.DiscountAmount = 0.00;\n    /***********************************************************\n    * This function acquires the customer's info.              *\n    ***********************************************************/\n    this.custURL = 'https://phpapicsci467.azurewebsites.net/php_script/pocreate/CustomerInfo.php';\n    /************************************************************\n    * This function updates the quote database.                 *\n    ************************************************************/\n    this.quoteUrl = 'https://phpapicsci467.azurewebsites.net/php_script/updateQuote.php';\n    //Build the form.\n    this.quoteForm = this.formBuilder.group({\n      rows: this.formBuilder.array([]),\n      SecretNotes: this.formBuilder.array([])\n    });\n  }\n  /***********************************************************\n  * This function runs when the page initializes.            *\n  ***********************************************************/\n  ngOnInit() {\n    this.Datacheck();\n    this.RetrieveQuote();\n  }\n  /***********************************************************\n  * This gets the quote from the DB and fills the form.      *\n  ***********************************************************/\n  RetrieveQuote() {\n    // Get the ID sent from previous page.\n    this.selectedID = history.state.data;\n    // Create a new HttpParams array.\n    let params = new HttpParams();\n    // Append parameters.\n    params = params.append('whereTerm', \"ID\");\n    params = params.append('whereValue', this.selectedID);\n    // Get the quotes.\n    this.http.get('https://phpapicsci467.azurewebsites.net/php_script/selectQuoteWhere.php', {\n      params\n    }).subscribe(response => {\n      this.selectedQuote = response;\n      // Get the quotes details.\n      this.getQuoteDetails(this.selectedQuote[0]);\n    });\n    // Clear the where term.\n    params = params.delete('whereTerm');\n    // Append parameters.\n    params = params.append('whereTerm', \"QuoteID\");\n    params = params.append('whereValue', this.selectedID);\n    // Get the quote lines.\n    this.http.get('https://phpapicsci467.azurewebsites.net/php_script/selectQuoteLineWhere.php', {\n      params\n    }).subscribe(response => {\n      this.selectedQuoteLines = response;\n      // Fill the quote lines in the form.\n      this.fillRows();\n    });\n  }\n  /***********************************************************\n  * This function will aquire the required quote details of  *\n  * of the selected quote and store them for later use       *\n  ***********************************************************/\n  getQuoteDetails(quotes) {\n    // Get quote status, ID of the customer, and the email\n    // associated with the quote.\n    this.Status = quotes['Status'];\n    this.CustID = quotes['CustID'];\n    this.CustEmail = quotes['CustEmail'];\n    // Get the customer info based on the CustID.\n    this.RetriveCustInfo(this.CustID);\n  }\n  RetriveCustInfo(CustID) {\n    const quoteData = {\n      custID: CustID\n    };\n    this.http.post(this.custURL, quoteData, {\n      responseType: 'json'\n    }).subscribe(response => {\n      this.Customer = response;\n      this.CustomerName = this.Customer[0]['name'];\n      this.CustomerAddyLn1 = this.Customer[0]['street'];\n      this.CustomerAddyLn2 = this.Customer[0]['city'];\n      this.CustomerContact = this.Customer[0]['contact'];\n    });\n  }\n  /***********************************************************\n  * This function facilitates filling of the form with the   *\n  * quote data.                                              *\n  ***********************************************************/\n  fillRows() {\n    // Loop through the selected quote lines.\n    for (let line of this.selectedQuoteLines) {\n      // Check if the line isn't a secret note.\n      if (line['SecretFlag'] == 'N') {\n        // Populate the row.\n        this.populateRow(line);\n      } else\n        // Else, it is a secret note.\n        {\n          // Populate the secret note section.\n          this.populateSecretNote(line);\n        }\n      // Set the maxLineID to the current LineID. At the end,\n      // maxLineID will be the highest value in the DB.\n      this.maxLineID = line['LineID'];\n    }\n    // Increment the maxLineID.\n    this.maxLineID++;\n    // Calculate the total.\n    this.calculateTotal();\n  }\n  /************************************************************\n  * This populates the current row in quote line section with *\n  * quote data.                                               *\n  ************************************************************/\n  populateRow(line) {\n    // Create a row.\n    const newRow = this.formBuilder.group({\n      ID: line['LineID'],\n      Item: line['RowDesc'],\n      Qty: line['RowQty'],\n      Price: line['RowPrice'],\n      isNew: false,\n      isDeleted: false\n    });\n    // Push to form.\n    this.quoteForm.get('rows').push(newRow);\n  }\n  /*************************************************************\n   * This populates the current row in the secret notes        *\n   * section with secret notes.                                *\n   ************************************************************/\n  populateSecretNote(line) {\n    // Set the secret note flag to true. This makes the\n    // section visible on the form.\n    this.showSecretNote = true;\n    // Build the secret note.\n    const secretNote = this.formBuilder.group({\n      ID: line['LineID'],\n      SecretNote: line['RowDesc'],\n      isNew: false,\n      // determines in the PHP if it needs to be\n      // inserted as a new line, or updated.\n      isDeleted: false // isDeleted determines if row is marked\n      // for deletion. If it's true, it isn't\n      // viewable on the form page. It also\n      // is deleted in the PHP.\n    });\n    // Push the form to the form.\n    this.quoteForm.get('SecretNotes').push(secretNote);\n    // Increment number of notes.\n    this.NoteCounter++;\n  }\n  /************************************************************\n  * This function calculates the quote total.                 *\n  ************************************************************/\n  calculateTotal() {\n    // Get all the rows in the form.\n    const rows = this.quoteForm.get('rows');\n    // Reset total to 0.\n    this.total = 0;\n    // Cycle through all the rows.\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows.at(i);\n      // Check if row exists.\n      if (row) {\n        // Check if the row wasn't deleted. If not, start\n        // getting the total.\n        if (!row.value['isDeleted']) {\n          const qtyControl = row.get('Qty');\n          const priceControl = row.get('Price');\n          // Calculate the row total; add to total.\n          if (qtyControl && priceControl) {\n            const qty = qtyControl.value;\n            const price = priceControl.value;\n            this.total += qty * price;\n            this.cd.markForCheck();\n          }\n        }\n      }\n    }\n    // Alert if the total is less than 0.\n    if ((this.total = this.total - this.DiscountAmount) < 0) {\n      alert(\"Total is less than 0!\");\n    }\n  }\n  /************************************************************\n  * Controls for Quote Line rows in Responsive Form.          *\n  ************************************************************/\n  get rowControls() {\n    return this.quoteForm.get('rows').controls;\n  }\n  /************************************************************\n  * Controls for Secret Notes rows in Responsive Form.        *\n  ************************************************************/\n  get SecretNotesControls() {\n    return this.quoteForm.get('SecretNotes').controls;\n  }\n  /************************************************************\n  * This function marks a row for deletion during a quote     *\n  * update.                                                   *\n  ************************************************************/\n  DeleteRow(line) {\n    line['isDeleted'] = true;\n    this.calculateTotal();\n  }\n  /************************************************************\n  * This function is used by the form to check if a <div> was *\n  * marked for deletion. If so, it does not display.          *\n  ************************************************************/\n  checkIfDeleted(line) {\n    return line['isDeleted'] == false;\n  }\n  /************************************************************\n  * This function adds another quote line to the form.        *\n  ************************************************************/\n  addRow() {\n    // Create a new row; initialize all values to 0.\n    const newRow = this.formBuilder.group({\n      ID: this.maxLineID,\n      Item: '',\n      Qty: 0,\n      Price: 0.0,\n      isNew: true,\n      isDeleted: false\n    });\n    this.maxLineID++;\n    this.calculateTotal();\n    this.quoteForm.get('rows').push(newRow);\n  }\n  /************************************************************\n  * This function adds another secret note to the form.       *\n  ************************************************************/\n  AddNote() {\n    // Check if there are not any notes.\n    if (this.NoteCounter <= 0) {\n      // Calculate the total.\n      this.calculateTotal();\n      // Show the secret section.\n      this.showSecretNote = !this.showSecretNote;\n    }\n    // Build a new note.\n    const newNote = this.formBuilder.group({\n      ID: this.maxLineID,\n      SecretNote: '',\n      isNew: true,\n      isDeleted: false\n    });\n    this.quoteForm.get('SecretNotes').push(newNote);\n    this.NoteCounter++;\n    this.maxLineID++;\n  }\n  /************************************************************\n  * This function is used to apply a discount.                *\n  ************************************************************/\n  ApplyDiscount() {\n    //Check if we have changed the Discount before, so we can \n    // reset the Original Total\n    if (this.ChangeCounter < 1) {\n      this.TempTotal = this.total;\n    } else {\n      this.total = this.TempTotal;\n    }\n    ++this.ChangeCounter;\n    //Check what kind of Discount we are applying\n    if (this.DiscountType == 'P') {\n      // If percent, calculate the discount amount.\n      this.DiscountAmount = this.total * (this.DiscountPercent / 100);\n      // If it is less than 0; reset the discount percent.\n      if (this.total < 0) {\n        this.total = this.TempTotal;\n        this.DiscountPercent = 0.0;\n      }\n    } else if (this.DiscountType == 'D') {\n      // Get the discount amount in dollars.\n      this.DiscountAmount = this.DiscountDollar;\n      if (this.total < 0) {\n        this.DiscountDollar = 0.0;\n        this.total = this.TempTotal;\n      }\n    }\n    // Calculate the total.\n    this.calculateTotal();\n  }\n  /************************************************************\n  * This function cancels editing and returns to previous     *\n  * page.                                                     *\n  ************************************************************/\n  CancelEdit() {\n    this.router.navigate(['/viewquotes']);\n  }\n  QuoteUpdate() {\n    // Calculate the total one more time.\n    this.calculateTotal();\n    // Create data to send to PHP.\n    const formData = this.quoteForm.value;\n    const FinalformData = {\n      formData,\n      quoteID: this.selectedID,\n      quoteEmail: this.CustEmail,\n      quoteStatus: this.Status,\n      quoteTotal: this.total,\n      quoteDiscount: this.DiscountAmount\n    };\n    // Send to PHP.\n    this.http.post(this.quoteUrl, FinalformData).subscribe({\n      next: data => {\n        // Handle the data\n        alert(\"Quote Updated!\");\n      },\n      error: error => {\n        console.error('Error saving data', error);\n      }\n    });\n    // Return to viewquotes page.\n    this.router.navigate(['/viewquotes']);\n  }\n  /**********************************************************\n  * This function will check to make sure a sales associate *\n  *   is properly logged in, and it will check if we have a *\n  *   current customer selected.                            *\n  **********************************************************/\n  Datacheck() {\n    //Stored Associate Name\n    var AssocName = localStorage.getItem('AssocName');\n    if (AssocName !== null) {\n      this.EmpName = JSON.parse(AssocName);\n    }\n    //Stored Admin Flag\n    var AdminFlag = localStorage.getItem('AdminFlag');\n    if (AdminFlag !== null) {\n      this.AdminFlag = JSON.parse(AdminFlag);\n    }\n    //Stored Associate ID\n    var savedAssoc = localStorage.getItem('CurrentAssoc');\n    if (savedAssoc !== null) {\n      this.savedAssoc = JSON.parse(savedAssoc);\n    } else {\n      this.router.navigateByUrl('/');\n      setTimeout(function () {\n        alert(\"Error: User not found, please Login\");\n      }, 200);\n    }\n  }\n};\nQuoteeditComponent = __decorate([Component({\n  selector: 'app-quoteedit',\n  templateUrl: './quoteedit.component.html',\n  styleUrls: ['./quoteedit.component.css']\n})], QuoteeditComponent);","map":{"version":3,"names":["Component","HttpParams","QuoteeditComponent","constructor","http","router","formBuilder","cd","selectedQuoteLines","selectedID","showSecretNote","NoteCounter","ChangeCounter","maxLineID","total","DiscountType","DiscountDollar","DiscountPercent","TempTotal","DiscountAmount","custURL","quoteUrl","quoteForm","group","rows","array","SecretNotes","ngOnInit","Datacheck","RetrieveQuote","history","state","data","params","append","get","subscribe","response","selectedQuote","getQuoteDetails","delete","fillRows","quotes","Status","CustID","CustEmail","RetriveCustInfo","quoteData","custID","post","responseType","Customer","CustomerName","CustomerAddyLn1","CustomerAddyLn2","CustomerContact","line","populateRow","populateSecretNote","calculateTotal","newRow","ID","Item","Qty","Price","isNew","isDeleted","push","secretNote","SecretNote","i","length","row","at","value","qtyControl","priceControl","qty","price","markForCheck","alert","rowControls","controls","SecretNotesControls","DeleteRow","checkIfDeleted","addRow","AddNote","newNote","ApplyDiscount","CancelEdit","navigate","QuoteUpdate","formData","FinalformData","quoteID","quoteEmail","quoteStatus","quoteTotal","quoteDiscount","next","error","console","AssocName","localStorage","getItem","EmpName","JSON","parse","AdminFlag","savedAssoc","navigateByUrl","setTimeout","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/creleb/Dev/angular/CSCI467-Group-Project/src/app/quoteedit/quoteedit.component.ts"],"sourcesContent":["import { Component, OnInit, ChangeDetectorRef} from '@angular/core';\nimport { HttpClient, HttpParams} from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, FormArray} from '@angular/forms';\n\n@Component({\n  selector: 'app-quoteedit',\n  templateUrl: './quoteedit.component.html',\n  styleUrls: ['./quoteedit.component.css']\n})\n\nexport class QuoteeditComponent {\n  // Variables for Quote Response.\n  selectedQuote: any;\n  selectedQuoteLines: any[] = [];\n\n  //Quote Details.\n  selectedID: number = 0;\n  Status: any;\n  CustEmail: any;\n\n  // Customer Data.\n  Customer: any;\n  CustID: any;\n  CustomerName: any;\n  CustomerContact: any;\n  CustomerAddyLn1: any;\n  CustomerAddyLn2: any;\n\n  // Variables for Form.\n  quoteForm: FormGroup;\n  showSecretNote: boolean = false;\n  NoteCounter: number = 0;\n  ChangeCounter: number = 0;\n  maxLineID: number = 0;\n\n  //Discount and Total Amounts.\n  total: any = 0.0;\n  DiscountType: any = 'P';\n  DiscountDollar: number = 0.00;\n  DiscountPercent: number = 0.00;\n  TempTotal: any = 0;\n  DiscountAmount: number = 0.00;\n\n  // Vars for DataCheck()\n  EmpName: any;\n  savedAssoc: any;\n  AdminFlag: any;\n\n  /***********************************************************\n  * This is the constructor of the form.                     *\n  ***********************************************************/\n  constructor(private http: HttpClient, private router: Router, private formBuilder: FormBuilder, private cd: ChangeDetectorRef) {\n    //Build the form.\n    this.quoteForm = this.formBuilder.group({\n      rows: this.formBuilder.array([]),\n      SecretNotes: this.formBuilder.array([])\n    });\n  }\n\n  /***********************************************************\n  * This function runs when the page initializes.            *\n  ***********************************************************/\n  ngOnInit() {\n    this.Datacheck();\n\n    this.RetrieveQuote();\n  }\n\n  /***********************************************************\n  * This gets the quote from the DB and fills the form.      *\n  ***********************************************************/\n  RetrieveQuote() {\n    // Get the ID sent from previous page.\n    this.selectedID = history.state.data;\n\n    // Create a new HttpParams array.\n    let params = new HttpParams();\n\n    // Append parameters.\n    params = params.append('whereTerm', \"ID\");\n    params = params.append('whereValue', this.selectedID);\n\n    // Get the quotes.\n    this.http.get('https://phpapicsci467.azurewebsites.net/php_script/selectQuoteWhere.php', {params}).subscribe((response: any) => {\n      this.selectedQuote = response;\n      // Get the quotes details.\n      this.getQuoteDetails(this.selectedQuote[0]);\n    });\n\n    // Clear the where term.\n    params = params.delete('whereTerm');\n\n    // Append parameters.\n    params = params.append('whereTerm', \"QuoteID\");\n    params = params.append('whereValue', this.selectedID);\n\n    // Get the quote lines.\n    this.http.get('https://phpapicsci467.azurewebsites.net/php_script/selectQuoteLineWhere.php', {params}).subscribe((response: any) => {\n      this.selectedQuoteLines = response;\n      // Fill the quote lines in the form.\n      this.fillRows();\n    });\n  }\n\n  /***********************************************************\n  * This function will aquire the required quote details of  *\n  * of the selected quote and store them for later use       *\n  ***********************************************************/\n  getQuoteDetails(quotes: any) {\n  // Get quote status, ID of the customer, and the email\n  // associated with the quote.\n    this.Status = quotes['Status'];\n    this.CustID = quotes['CustID'];\n    this.CustEmail = quotes['CustEmail'];\n\n    // Get the customer info based on the CustID.\n    this.RetriveCustInfo(this.CustID);\n  }\n\n  /***********************************************************\n  * This function acquires the customer's info.              *\n  ***********************************************************/\n  private custURL='https://phpapicsci467.azurewebsites.net/php_script/pocreate/CustomerInfo.php';\n  RetriveCustInfo(CustID: any) : void{\n    const quoteData={custID: CustID}\n    this.http.post(this.custURL,quoteData, {responseType:'json'}).subscribe(\n      response=>{\n        this.Customer = response;\n        this.CustomerName = this.Customer[0]['name'];\n        this.CustomerAddyLn1 = this.Customer[0]['street'];\n        this.CustomerAddyLn2 = this.Customer[0]['city'];\n        this.CustomerContact = this.Customer[0]['contact'];\n    });\n  }\n\n  /***********************************************************\n  * This function facilitates filling of the form with the   *\n  * quote data.                                              *\n  ***********************************************************/\n  fillRows() {\n    // Loop through the selected quote lines.\n    for (let line of this.selectedQuoteLines) {\n      // Check if the line isn't a secret note.\n      if (line['SecretFlag'] == 'N')\n      {\n        // Populate the row.\n        this.populateRow(line);\n      }\n      else  // Else, it is a secret note.\n      { // Populate the secret note section.\n        this.populateSecretNote(line);\n      }\n      // Set the maxLineID to the current LineID. At the end,\n      // maxLineID will be the highest value in the DB.\n      this.maxLineID = line['LineID'];\n    }\n    // Increment the maxLineID.\n    this.maxLineID++;\n\n    // Calculate the total.\n    this.calculateTotal();\n  }\n\n  /************************************************************\n  * This populates the current row in quote line section with *\n  * quote data.                                               *\n  ************************************************************/\n  populateRow(line: any) {\n    // Create a row.\n    const newRow = this.formBuilder.group({\n      ID: line['LineID'],\n      Item: line['RowDesc'],\n      Qty: line['RowQty'],\n      Price: line['RowPrice'],\n      isNew: false,\n      isDeleted: false,\n    });\n    // Push to form.\n    (this.quoteForm.get('rows') as FormArray).push(newRow);\n  }\n\n /*************************************************************\n  * This populates the current row in the secret notes        *\n  * section with secret notes.                                *\n  ************************************************************/\n  populateSecretNote(line:any) {\n    // Set the secret note flag to true. This makes the\n    // section visible on the form.\n    this.showSecretNote = true;\n\n    // Build the secret note.\n    const secretNote = this.formBuilder.group({\n      ID: line['LineID'],\n      SecretNote: line['RowDesc'],\n      isNew: false,  // isNew determines if the row is new. This\n                     // determines in the PHP if it needs to be\n                     // inserted as a new line, or updated.\n\n      isDeleted: false,  // isDeleted determines if row is marked\n                         // for deletion. If it's true, it isn't\n                         // viewable on the form page. It also\n                         // is deleted in the PHP.\n    });\n    // Push the form to the form.\n    (this.quoteForm.get('SecretNotes') as FormArray).push(secretNote);\n    // Increment number of notes.\n    this.NoteCounter++;\n  }\n\n  /************************************************************\n  * This function calculates the quote total.                 *\n  ************************************************************/\n  calculateTotal() {\n    // Get all the rows in the form.\n    const rows = this.quoteForm.get('rows') as FormArray;\n\n    // Reset total to 0.\n    this.total = 0;\n    \n    // Cycle through all the rows.\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows.at(i);\n\n      // Check if row exists.\n      if (row) {\n        // Check if the row wasn't deleted. If not, start\n        // getting the total.\n        if (!row.value['isDeleted']) {\n          const qtyControl = row.get('Qty');\n          const priceControl = row.get('Price');\n      \n          // Calculate the row total; add to total.\n          if (qtyControl && priceControl) {\n            const qty = qtyControl.value;\n            const price = priceControl.value;\n            this.total += qty * price;\n            this.cd.markForCheck();\n          }\n        }\n      }\n    }\n  \n    // Alert if the total is less than 0.\n    if ((this.total = this.total - this.DiscountAmount) < 0)\n    {\n      alert(\"Total is less than 0!\");\n    }\n    \n  }\n\n  /************************************************************\n  * Controls for Quote Line rows in Responsive Form.          *\n  ************************************************************/\n  get rowControls() {\n    return (this.quoteForm.get('rows') as FormArray).controls;\n  }\n\n  /************************************************************\n  * Controls for Secret Notes rows in Responsive Form.        *\n  ************************************************************/\n  get SecretNotesControls() {\n    return (this.quoteForm.get('SecretNotes') as FormArray).controls;\n  }\n\n  /************************************************************\n  * This function marks a row for deletion during a quote     *\n  * update.                                                   *\n  ************************************************************/\n  DeleteRow(line: any): void{\n\n    line['isDeleted'] = true;\n\n    this.calculateTotal();\n  }\n\n  /************************************************************\n  * This function is used by the form to check if a <div> was *\n  * marked for deletion. If so, it does not display.          *\n  ************************************************************/\n  checkIfDeleted(line: any): boolean\n  {\n    return line['isDeleted'] == false;\n  }\n\n  /************************************************************\n  * This function adds another quote line to the form.        *\n  ************************************************************/\n  addRow() {\n    // Create a new row; initialize all values to 0.\n    const newRow = this.formBuilder.group({\n      ID: this.maxLineID,\n      Item: '',\n      Qty: 0,\n      Price: 0.0,\n      isNew: true,\n      isDeleted: false,\n    });\n    this.maxLineID++;\n    this.calculateTotal();\n    (this.quoteForm.get('rows') as FormArray).push(newRow);\n  }\n\n  /************************************************************\n  * This function adds another secret note to the form.       *\n  ************************************************************/\n  AddNote() : void {\n    // Check if there are not any notes.\n    if(this.NoteCounter <= 0){\n      // Calculate the total.\n      this.calculateTotal();\n      // Show the secret section.\n      this.showSecretNote = !this.showSecretNote;\n    }\n\n    // Build a new note.\n    const newNote = this.formBuilder.group({\n      ID: this.maxLineID,\n      SecretNote: '',\n      isNew: true,\n      isDeleted: false,\n    });\n    (this.quoteForm.get('SecretNotes') as FormArray).push(newNote);\n    this.NoteCounter++;\n    this.maxLineID++;\n  }\n  \n  /************************************************************\n  * This function is used to apply a discount.                *\n  ************************************************************/\n  ApplyDiscount():void\n  {\n    //Check if we have changed the Discount before, so we can \n    // reset the Original Total\n    if (this.ChangeCounter < 1)\n    {\n      this.TempTotal = this.total;\n    }\n    else\n    {\n      this.total = this.TempTotal;\n    }\n\n    ++this.ChangeCounter;\n    \n    //Check what kind of Discount we are applying\n    if(this.DiscountType == 'P')\n    {\n      // If percent, calculate the discount amount.\n      this.DiscountAmount = this.total * (this.DiscountPercent / 100);\n\n      // If it is less than 0; reset the discount percent.\n      if(this.total < 0){\n        this.total = this.TempTotal;\n        this.DiscountPercent = 0.0;\n      }\n    }\n    else if(this.DiscountType == 'D')\n    {\n      // Get the discount amount in dollars.\n      this.DiscountAmount = this.DiscountDollar;\n\n      if(this.total < 0){\n        this.DiscountDollar = 0.0;\n        this.total = this.TempTotal;\n      }\n    }\n\n    // Calculate the total.\n    this.calculateTotal();\n  }\n\n  /************************************************************\n  * This function cancels editing and returns to previous     *\n  * page.                                                     *\n  ************************************************************/\n  CancelEdit() {\n    this.router.navigate(['/viewquotes']);\n  }\n\n  /************************************************************\n  * This function updates the quote database.                 *\n  ************************************************************/\n  private quoteUrl = 'https://phpapicsci467.azurewebsites.net/php_script/updateQuote.php';\n  QuoteUpdate() :any {\n    // Calculate the total one more time.\n    this.calculateTotal();\n\n    // Create data to send to PHP.\n    const formData = this.quoteForm.value;\n    const FinalformData = {\n      formData,\n      quoteID: this.selectedID,\n      quoteEmail: this.CustEmail,\n      quoteStatus: this.Status,\n      quoteTotal: this.total,\n      quoteDiscount: this.DiscountAmount,\n    };\n  \n    // Send to PHP.\n    this.http.post(this.quoteUrl, FinalformData).subscribe({        \n      next: (data: any) => {\n      // Handle the data\n      alert(\"Quote Updated!\");\n      },\n      error: (error) => {\n        console.error('Error saving data', error);\n      }\n    });\n\n    // Return to viewquotes page.\n    this.router.navigate(['/viewquotes']);\n  }\n\n  /**********************************************************\n  * This function will check to make sure a sales associate *\n  *   is properly logged in, and it will check if we have a *\n  *   current customer selected.                            *\n  **********************************************************/\n  Datacheck(): void{\n    //Stored Associate Name\n    var AssocName = localStorage.getItem('AssocName');\n    if(AssocName !== null){\n      this.EmpName = JSON.parse(AssocName);\n    }\n\n    //Stored Admin Flag\n    var AdminFlag = localStorage.getItem('AdminFlag');\n    if(AdminFlag !== null){\n      this.AdminFlag = JSON.parse(AdminFlag);\n    }\n  \n    //Stored Associate ID\n    var savedAssoc = localStorage.getItem('CurrentAssoc');\n    if(savedAssoc !== null){\n      this.savedAssoc = JSON.parse(savedAssoc);\n    }else{\n      this.router.navigateByUrl('/');\n      setTimeout(function(){\n        alert(\"Error: User not found, please Login\");\n      }, 200);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}